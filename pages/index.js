import React from 'react'
import { ApolloClient, InMemoryCache, gql } from '@apollo/client'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import {
  Heading,
  Box,
  Flex,
  Input,
  Stack,
  IconButton,
  useToast,
} from '@chakra-ui/react'

import { SearchIcon, CloseIcon } from "@chakra-ui/icons"

import Characters from '../components/Characters'

export default function Home(results) {
  const initialState = results
  const [characters, setCharacters] = React.useState(initialState.characters)
  const [search, setSearch] = React.useState('')

  const toast = useToast()

  return (
    <Flex direction={"column"} justify="center" align={'center'} >
      <Head>
        <title>Exercise Graphql App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box mb={4} flexDirection="column" alignItems={'center'} justifyContent="center" py={8}>
        <Heading as={"h1"} size="2xl" mb={8}>
          Exercise Rick and Morty Graphql
        </Heading>
        <form
          onSubmit={async (event) => {
            event.preventDefault();
            const results = await fetch("/api/search-name", {
              method: "post",
              body: search,
            });
            const { characters, error } = await results.json();
            if (error) {
              toast({
                position: "bottom",
                title: "An error occurred.",
                description: error,
                status: "error",
                duration: 5000,
                isClosable: true,
              });
            } else {
              setCharacters(characters);
            }
          }}
        >
          <Stack maxWidth="350px" width="100%" isInline mb={8}>
            <Input
              placeholder="Search"
              value={search}
              border="none"
              onChange={(e) => setSearch(e.target.value)}
            ></Input>
            <IconButton
              colorScheme="blue"
              aria-label="Search database"
              icon={<SearchIcon />}
              disabled={search === ""}
              type="submit"
            />
            <IconButton
              colorScheme="red"
              aria-label="Reset "
              icon={<CloseIcon />}
              disabled={search === ""}
              onClick={async () => {
                setSearch("");
                setCharacters(initialState.characters);
              }}
            />
          </Stack>
        </form>
      </Box>
      <Characters characters={characters} />
    </Flex>
  )
}

export async function getStaticProps() {
  const client = new ApolloClient({
    uri: process.env.NEXT_PUBLIC_URL,
    cache: new InMemoryCache(),
  })

  const { data } = await client.query({
    query: gql`
      query {
        characters(page: 1) {
          info {
            count
            pages
          }
          results {
            name
            id
            location {
              name
              id
            }
            image
            origin {
              name
              id
            }
            episode {
              id
              episode
              air_date
            }
          }
        }
      }
    `,
  })

  return {
    props: {
      characters: data.characters.results,
    },
  }
}